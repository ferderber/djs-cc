"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[597],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,g=m["".concat(o,".").concat(d)]||m[d]||p[d]||i;return n?r.createElement(g,s(s({ref:t},u),{},{components:n})):r.createElement(g,s({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var c=2;c<i;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3372:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return o},metadata:function(){return c},toc:function(){return u},default:function(){return m}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),s=["components"],l={id:"index",title:"djs-cc",slug:"/api",sidebar_label:"Readme",sidebar_position:0,custom_edit_url:null},o="djs-cc",c={unversionedId:"api/index",id:"api/index",isDocsHomePage:!1,title:"djs-cc",description:"npm Version",source:"@site/docs/api/index.md",sourceDirName:"api",slug:"/api",permalink:"/djs-cc/api",editUrl:null,version:"current",sidebarPosition:0,frontMatter:{id:"index",title:"djs-cc",slug:"/api",sidebar_label:"Readme",sidebar_position:0,custom_edit_url:null},sidebar:"tutorialSidebar",previous:{title:"Intro",permalink:"/djs-cc/"},next:{title:"Exports",permalink:"/djs-cc/api/modules"}},u=[{value:"Installation",id:"installation",children:[]},{value:"Features",id:"features",children:[{value:"Planned Features",id:"planned-features",children:[]}]},{value:"Sample usage",id:"sample-usage",children:[]},{value:"Requirements",id:"requirements",children:[]}],p={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"djs-cc"},"djs-cc"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/djs-cc"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/npm/v/djs-cc.svg",alt:"npm Version"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://codeclimate.com/github/matthewferderber/djs-cc"},(0,i.kt)("img",{parentName:"a",src:"https://codeclimate.com/github/matthewferderber/djs-cc/badges/coverage.svg",alt:"Test Coverage"}))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"djs-cc (discord.js-commandclient)")," is a typescript library for discord.js that adds simple command creation and configuration storing capabilities."),(0,i.kt)("p",null,"The idea for this project came after using many different command frameworks and wanting a simpler method of displaying command results and errors. I wanted to try making my own version partially as a learning experience but also to change and add features I wanted for future projects."),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"npm install --save djs-cc")),(0,i.kt)("h2",{id:"features"},"Features"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Class based commands"),(0,i.kt)("li",{parentName:"ul"},"Typescript!"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"async/await")," support"),(0,i.kt)("li",{parentName:"ul"},"Simple argument parsing"),(0,i.kt)("li",{parentName:"ul"},"Error handling"),(0,i.kt)("li",{parentName:"ul"},"Per Guild SQL based settings storage")),(0,i.kt)("h3",{id:"planned-features"},"Planned Features"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Reaction based command features"),(0,i.kt)("li",{parentName:"ul"},"Slash based command support"),(0,i.kt)("li",{parentName:"ul"},"Updating command status messages (Ex: Progress bar)"),(0,i.kt)("li",{parentName:"ul"},"Base commands (help, restart, status, config, alias)"),(0,i.kt)("li",{parentName:"ul"},"Auto-deleting bot replies (Ex: help message dissapears after two minutes)"),(0,i.kt)("li",{parentName:"ul"},"Make library compatible with other messaging applications/libraries")),(0,i.kt)("h2",{id:"sample-usage"},"Sample usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const { Client, Command, Argument, ArgumentType } = require("djs-cc");\n\nclass SampleCommand extends Command {\n  constructor() {\n    super({\n      name: "test",\n      description: "A test command",\n      usage: "!test",\n      args: [\n        new Argument({\n          name: "sampleArg",\n          type: ArgumentType.Integer,\n          required: true,\n        }),\n      ],\n    });\n  }\n  async run(msg, args) {\n    await msg.reply(`argument sampleArg was: ${args.get("sampleArg")}`);\n  }\n  //(optional) function to check if the user is allowed to use the command\n  hasPermission(msg) {\n    return msg.author.username.includes("Cobalt");\n  }\n}\nconst bot = new Client(["Intents_Here"]);\nbot.registerCommand(new SampleCommand());\nbot.login(process.env.DISCORD_BOT_TOKEN);\n')),(0,i.kt)("h2",{id:"requirements"},"Requirements"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Node.js version ",(0,i.kt)("inlineCode",{parentName:"li"},">v16.0.0")),(0,i.kt)("li",{parentName:"ul"},"discord.js ",(0,i.kt)("inlineCode",{parentName:"li"},">v13.0.0")),(0,i.kt)("li",{parentName:"ul"},"sqlite3, mysql, or pg (If you plan on storing data)")))}m.isMDXComponent=!0}}]);